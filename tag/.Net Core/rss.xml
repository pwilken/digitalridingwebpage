<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>https://digitalriding.de</link>
   <description>go down for deep diving into...</description>
   <language>de-ge</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Aufsetzen einer Build Pipeline - Github zum Docker Hub</title>
	  <link>//Build-Pipeline-Docker-Github-de</link>
	  <author></author>
	  <pubDate>2018-04-21T08:00:00+00:00</pubDate>
	  <guid>//Build-Pipeline-Docker-Github-de</guid>
	  <description><![CDATA[
	     <p>Folgende Dinge werden für das Aufsetzen einer simplen Continues Integration und Delivery mit Github und dem Docker Hub benötigt:</p>
<ul>
  <li>Docker Hub Account</li>
  <li>Github Account</li>
  <li>Lauffähiges Projekt in Github mit Dockerfile</li>
</ul>

<h1 id="das-github-projekt-mit-dockerfile">Das Github Projekt mit Dockerfile</h1>
<h2 id="beispielprojekt-mit-dockerfile-net-core">Beispielprojekt mit Dockerfile (.Net Core)</h2>
<p>Das Dockerfile kann selbst geschrieben oder von Visual Studio erstellt werden. 
Auf das selbst schreiben werde ich demnächst detailiert in einem weiteren Beitrag eingehen.</p>

<p>Ihr könnt entweder z.B. dieses Projekt 
<a href="https://github.com/pwilken/dotnetcore-webservice-demonstration" rel="pwilken/dotnetcore-webservice-demonstration">pwilken/dotnetcore-webservice-demonstration</a>
nehmen oder ein selbst erstelltes als Github Repository verwenden.</p>

<h3 id="selbst-erstellen">Selbst erstellen</h3>
<p>In Visual Studio ein neues Projekt erstellen. 
Unter .Net Core den Typ “ASP.NET Core Web Application” auswählen und mit OK bestätigen.
In dem darauffolgenden Fenster “API” wählen und “Enable Docker Support” anhaken + “OS: Linux” auswählen.</p>

<p>Das Projekt könnt ihr, wenn ihr Docker lokal installiert habt und auf Linux Container gestellt habt, so schon lokal mit Docker testen.
Ihr könnt das Projekt aber auch so schon für die Build Pipeline als Repository zu Github hinzufügen. 
Für das Einrichten und Testen reicht das.</p>

<h1 id="einrichten-der-build-pipeline">Einrichten der Build Pipeline</h1>
<h2 id="vorzunehmende-einstellungen">Vorzunehmende Einstellungen</h2>
<p><a href="https://hub.docker.com/" rel="hub.docker">hub.docker</a> -&gt; Settings -&gt; Linked Accounts &amp; Services -&gt; Link Github -&gt; Public and Private -&gt; Authorize docker <br />
<a href="https://cloud.docker.com" rel="cloud.docker">cloud.docker</a> -&gt; Open a repository -&gt; Builds -&gt; Configure Automated Builds</p>

<p>Bei jeder Änderung (push) des Github-Repos, wird das Image nun neu gebuilded.</p>

<h2 id="docker-rechte-in-github">Docker Rechte in Github</h2>
<p>Die Rechte für das Docker Hub sind auf Github sichtbar und entfernbar unter:
Settings -&gt; Applications -&gt; Authorized OAuth Apps</p>

	  ]]></description>
	</item>


</channel>
</rss>
