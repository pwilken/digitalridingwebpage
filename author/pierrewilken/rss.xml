<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>https://digitalriding.de</link>
   <description>go down for deep diving into...</description>
   <language>de-ge</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Was ist DevOps?</title>
	  <link>//what-is-devops</link>
	  <author></author>
	  <pubDate>2019-01-27T00:00:00+00:00</pubDate>
	  <guid>//what-is-devops</guid>
	  <description><![CDATA[
	     <p>Wer kennt es nicht, der Motor brummt, der Gang sitzt und das Gaspedal ist etwas mehr als von nöten Richtung Boden gedrückt.
Normalerweise würde unser Auto uns nun beim Anfahren, RED BULL ALPHA JET artig in den Rücksitz pressen.
Leider entspricht die tatsächlich auf die Straße gebrachte Leistung jedoch eher der eines Bobbycars.</p>

<p>Der Übeltäter ist leicht überführt, die Handbremse ist noch angezogen…</p>

<p>Wodrauf möchte ich genau hinnaus, was hat das mit DevOps zutun?</p>

<p>Der Einsatz von <b>DevOps Denkweisen, Praktiken und Tools</b>, kann ein Lösen von solchen Handbremsen bewirken.</p>

<hr />
<p>In diesem Artikel erkläre ich was DevOps ist und welche potentiellen Handbremsen gelöst werden können.</p>

<h1 id="was-ist-devops">Was ist DevOps?</h1>
<p>Bei DevOps geht es kurzgefasst darum Services und Anwendungen möglichst einfach, schnell und hoffentlich auch sicher bereitzustellen.
Mit dem Sicherheitsaspekt beschäftigen wir uns in einem späteren Artikel ausführlicher, Stichwort DevSecOps, scheinbar hängen nicht nur die Deutschen gerne Wörter aneinander.</p>

<p><strong>Frage</strong>: Was ist das Ziel von DevOps?</p>

<p>Das Ziel von DevOps ist es, ein möglichst zeiteffektives entwickeln und verbessern von Produkten zu erzielen. 
Zum einen zur besseren Bedienung der Kunden sowie Durchsetzung auf dem Markt und zum anderen zur Erleichterung des Arbeitsalltags der Entwicklungs- und Operations-Teams.</p>

<p><a title="Rajiv.Pant [CC BY 3.0 (https://creativecommons.org/licenses/by/3.0)], from Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Devops.png"><img width="512" alt="Devops" src="https://upload.wikimedia.org/wikipedia/commons/4/4e/Devops.png" /></a></p>

<p>Die Grafik veranschaulicht relativ gut den Schnitt den DevOps bewerkstelligt. Wie Stark der Schnitt zwischen den einzelnen Bereichen ist, ist von der individuellen Situation abhängig.</p>

<h2 id="wie-funktioniert-devops">Wie funktioniert DevOps?</h2>
<p>Es gibt verschiedenste Möglichkeiten DevOps anzuwenden, die Basis ist jedoch die Selbe.</p>

<p>Durch die endisolierung der Entwicklungs- und Operations-Teams wird neben der Schließung von Fach- und Kommunikationslücken ein agileres Vorgehen ermöglicht. Dieses Vorgehen kombiniert mit einer möglichst hohen Automatisierung von bisher manuellen Prozessen ermöglicht eine effektivere und autonomere Vorgehensweise.</p>

<p><strong>Frage</strong>: Wie könnte das beispielsweise aussehen?</p>

<p>Wenn beispielsweise per Knopfdruck oder per Commit in einen Branch, eine realitätsnahe Testumgebung des ausgeführten Quellcodes auf den Unternehmensserven bereitgestellt wird,
dann ermöglicht dies ein effektiveres und zufriedenstellenderes Arbeiten für die Entwickler als die klassische Vorgehensweise.</p>

<p>Integrieren wir jetzt in diesen Ablauf automatisierte Tests, dann erhalten wir bereits vor den abschließenden manuellen Tests aussagekräftige Feedbacks.</p>

<p>Das Ganze nennt sich in der Form Continuous Deployment kurz. CD und kann noch weiter aufgeführt werden, ein paar weitere Stichwörter hierzu sind: Skalierbar, Container, Quality Gates bzw. Continuous Inspection, Staging-Area, Deployment Strategien.</p>

<p><strong>Grafik</strong>: Darstellung eines Continuous Deployment Ablaufs
<a title="Jouasse [CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)], from Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:DevOps_from_Integration_to_Deployment.jpg"><img width="710" alt="DevOps from Integration to Deployment" src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a6/DevOps_from_Integration_to_Deployment.jpg/1024px-DevOps_from_Integration_to_Deployment.jpg" /></a></p>

<p><strong>Frage</strong>: In jedem Team zwingend Dev &amp; Ops?</p>

<p>Es ist nicht zwingend erforderlich das jedes Team den Schnitt zwischen Entwicklung &amp; Operations abbildet, gerade in kleineren Teams oder monolithischen Software-Architekturen kann dies uneffektiv bis nicht möglich sein.</p>

<p>Hier bietet sich eventuell ein Team übergreifender DevOps-Part als die beste Möglichkeit an.</p>

<h2 id="kann-und-sollte-devops-überall-eingeführt-werden">Kann und sollte DevOps überall eingeführt werden?</h2>
<p>Ganz klar, nein.</p>

<p>Zum einen eignet sich nicht jede Unternehmensstruktur sowie nicht alle Technologien für den Einsatz von DevOps herangehensweisen und zum anderen erfordert der Einsatz von entsprechenden Denkweisen, Methodiken und Werkzeugen in der Einführung ausreichend Ressourcen. Auf lange Sicht werden jedoch wenn gut angewendet Ressourcen eingespart.</p>

<p><strong>Frage</strong>: Woher weiß ich ob unsere Unternehmensstruktur passt?</p>

<p>Einfach ausgedrückt kann man sagen, desdo agiler ein Unternehmen agiert desdo geeigneter und effektiver kann die Etablierung von DevOps werden.
Das ist natürlich sehr vereinfacht ausgedrückt, die Umstellung auf DevOps entspricht einer gewissen Kulturumstellung im Unternehmen, hier ist Erfahrung und Feingefühl gefragt.</p>

<p>In einem dynamischen Unternehmen mit flachen Hierarchien lässt sich dies grundsätzlich einfacher umsetzen als in einem großen Konzern mit einem Wasserfallartigen Projektmanagement. Dafür ist wahrscheinlich die Anforderung der Ressourcen im zweiteren ein kleineres Problem.</p>

<p><strong>Frage</strong>: Was muss der Technologie-Stack erfüllen?
Folgende Punkte sind zu erfüllen:</p>
<ul>
  <li>Einsatz einer Quellcodeverwaltung bspw. Git</li>
  <li>Automatisiertes Builden möglich</li>
  <li>Containerization / Virtualization (bspw. für gute Skalierbarkeit)</li>
  <li>Automatisierte Tests möglich</li>
</ul>

<p><strong>Frage</strong>: Was ist mit den Ressourcen genau gemeint?</p>

<p>Zum einen erfordert die Einführungsphase einen gewissen Lernprozess der Zeit kostet und zum anderen werden anfangs auch vermehrt Fehler gemacht oder Fehlentscheidungen getroffen. Zusätzlich können weitere Ressourcen für Infrastruktur und Cloud oder Lizenzkosten anfallen.</p>

<h3 id="die-potentiellen-handbremsen-kurzgefasst">Die potentiellen Handbremsen kurzgefasst</h3>
<p>Weniger manuelle Abläufe, daraus folgt:</p>
<ul>
  <li>geringerer Zeitaufwand</li>
  <li>transparentere Vorgänge</li>
  <li>schnellere und häufigere Bereitstellung</li>
  <li>geringere Fehleranfälligkeit und erhöhte Zuverlässigkeit</li>
</ul>

<p>Weitere:</p>
<ul>
  <li>Bessere Reproduzierbarkeit</li>
  <li>Erhöhte Autonomie von Teams</li>
  <li>Verbesserte Überwachung und Protokollierung</li>
  <li>Mehr Zusammenarbeit und weniger Kompetenz-Silos</li>
</ul>

<p>Zusätzlich kann eine DevOps-Vorgehensweise eine effektive Skalierbarkeit ermöglichen, näheres hierzu in dem nächsten Blog-Artikel “Skalierbare Container-Infrastrukturen.</p>

<h1 id="ende">Ende</h1>
<p>Aus der <a href="https://digitalriding.de/DevOps%20Beginner/">DevOps für Beginner</a> Reihe.</p>

<p>Ich hoffe der Artikel hat dir gefallen.
Falls du Anregungen, Kritiken oder weitere Vorschläge hast welche Themen wir als nächstes behandeln sollen, geb uns bitte bescheid.</p>

<p>Der nächste Artikel aus der Reihe <a href="https://digitalriding.de/DevOps%20Beginner/">DevOps für Beginner</a> erscheint in Kürze.</p>

<hr />

<h2><center>Buchempfehlungen DevOps</center></h2>
<p><a href="https://www.amazon.de/dp/3836263858/ref=as_li_ss_il?&amp;hvadid=310686337877&amp;hvpos=1o2&amp;hvnetw=g&amp;hvrand=14313623090287937732&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9044654&amp;hvtargid=pla-562466967806&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=63478267842&amp;hvpone=&amp;hvptwo=&amp;hvadid=310686337877&amp;hvpos=1o2&amp;hvnetw=g&amp;hvrand=14313623090287937732&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9044654&amp;hvtargid=pla-562466967806&amp;linkCode=li3&amp;tag=digitalriding-21&amp;linkId=d95945ea9d086daf769e0403bc38ffeb&amp;language=de_DE" target="_blank"><img border="0" src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=3836263858&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=DE&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=digitalriding-21&amp;language=de_DE" /></a><img src="https://ir-de.amazon-adsystem.com/e/ir?t=digitalriding-21&amp;language=de_DE&amp;l=li3&amp;o=3&amp;a=3836263858" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

	  ]]></description>
	</item>

	<item>
	  <title>Lifehack - In-Ear-Kopfhörer Klang günstig verbessern + Abschirmung</title>
	  <link>//Earphone-Lifehack-de</link>
	  <author></author>
	  <pubDate>2018-09-22T19:00:00+00:00</pubDate>
	  <guid>//Earphone-Lifehack-de</guid>
	  <description><![CDATA[
	     <p>Der Klang von In-Ear-Kopfhörern kann mit einem einfachen Trick kostengünstig verbessert werden.</p>

<p>Benötigt wird dazu zusätzlich zu den Kopfhörern nur ein Gehörschutz.
Beispielsweise dieser: <a target="_blank" href="https://www.amazon.de/gp/product/B002IV8I1C/ref=as_li_tl?ie=UTF8&amp;camp=1638&amp;creative=6742&amp;creativeASIN=B002IV8I1C&amp;linkCode=as2&amp;tag=digitalriding-21&amp;linkId=b12cfdb616517f5335f5c431a311ce59">3M Peltor Optime I Kapselgehörschützer gelb für Lärm bis 98dB</a><img src="//ir-de.amazon-adsystem.com/e/ir?t=digitalriding-21&amp;l=am2&amp;o=3&amp;a=B002IV8I1C" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Der Hörschutz wird einfach zusätzlich zu den Kopfhörern getragen, dies verbessert nicht nur die Klangbildung sondern schirmt auch von Außengeräuschen ab.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Scaffolding - Code aus bestehender Datenbank generieren (Firebird Datenbank)</title>
	  <link>//Database-to-code-firebird-de</link>
	  <author></author>
	  <pubDate>2018-04-21T08:45:00+00:00</pubDate>
	  <guid>//Database-to-code-firebird-de</guid>
	  <description><![CDATA[
	     <h1 id="database-to-code-mit-einer-existierenden-firebird-datenbank">Database to Code mit einer existierenden Firebird Datenbank</h1>
<p>Generieren von Models, Controller und Views in einer “ASP.Net Core Web Applikation” anhand existierender Firebird Datenbank.</p>

<h2 id="schritt-1-erstelle-eine-aspnet-core-web-applikation">Schritt 1: Erstelle eine ASP.Net Core Web Applikation</h2>

<h2 id="schritt-2-füge-die-folgenden-nuget-packages-hinzu">Schritt 2: Füge die folgenden nuget-packages hinzu</h2>
<ul>
  <li>EntityFrameworkCore.FirebirdSql</li>
  <li>Microsoft.AspNetCore.All</li>
  <li>Microsoft.NETCore.App</li>
  <li>Microsoft.VisualStudio.Web.CodeGeneration.Design</li>
</ul>

<h2 id="schritt-3-erstelle-und-speichere-den-connection-string-zu-deiner-datenbank">Schritt 3: Erstelle und speichere den connection string zu deiner Datenbank</h2>
<p>Using example values.</p>

<p>String for dbfilename.fdb</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"User=sysdba;Password=masterkey;Database=/firebird/data/dbfilename.fdb;DataSource=127.0.0.1;
Port=3050;Dialect=3;Charset=NONE;Role=;Connection lifetime=15;Pooling=true;MinPoolSize=0;
MaxPoolSize=50;PacketSize=8192;ServerType=0;"</span>
</code></pre></div></div>

<h2 id="schritt-4-benutze-scaffold-um-dein-datenbank-model-zu-reversen">Schritt 4: Benutze Scaffold um dein Datenbank-Model zu reversen</h2>
<p>Benutze den folgenden Befehl mit deinen angepassten Werten, z.B. in VisualStudio in der Paketverwaltungs-Konsole.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Scaffold-DbContext <span class="s2">"User=sysdba;Password=masterkey;Database=/firebird/data/dbfilename.fdb;
DataSource=127.0.0.1;Port=3050;Dialect=3;Charset=NONE;Role=;Connection lifetime=15;
Pooling=true;MinPoolSize=0;MaxPoolSize=50;PacketSize=8192;ServerType=0;"</span>
EntityFrameworkCore.FirebirdSQL <span class="nt">-o</span> Models
</code></pre></div></div>

<h2 id="schritt-5-generiere-die-controller-und-views">Schritt 5: Generiere die Controller und Views</h2>
<p>Rechtsklick auf Projekt -&gt; Add -&gt; New Scaffolded Item…
-&gt; MVC Controller with views, using Entity Framework</p>

<p><img src="http://pierrewilken.de/assets/img/dbtocode_fb.png" alt="Foo" /></p>

<p>Es wird eine data context Klasse für alle Models der Datenbank generiert.</p>

<h2 id="schritt-6-kleine-anpassungen">Schritt 6: Kleine Anpassungen</h2>
<p>Add in Startup.cs -&gt; ConfigureServices(IServiceCollection services)</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>services.AddDbContext&lt;_firebird_data_dbfilename_fdbContext&gt;<span class="o">(</span>
   options <span class="o">=&gt;</span> options.UseFirebird<span class="o">(</span>
   Database.GetConnectionString<span class="o">()</span>
 <span class="o">))</span><span class="p">;</span>
</code></pre></div></div>

<p>Füge den folgenden Konstruktor in _firebird_data_dbfilename_fdbContext hinzu.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public _firebird_data_dbfilename_fdbContext<span class="o">(</span>DbContextOptions&lt;_firebird_data_dbfilename_fdbContext&gt; options<span class="o">)</span> 
                                            base<span class="o">(</span>options<span class="o">)</span>
<span class="o">{</span>            
<span class="o">}</span>
</code></pre></div></div>

<h2 id="schritt-7-genieße-die-resultate">Schritt 7: Genieße die Resultate</h2>
<p>Die Anwendung einfach ausführen und am ende der Url den Controller-Namen ohne “Controller” hinzufügen.
http://localhost:51710/AddContacts</p>


	  ]]></description>
	</item>

	<item>
	  <title>Einführung in den Einsatz von Kubernetes</title>
	  <link>//Einstieg-Kubernetes</link>
	  <author></author>
	  <pubDate>2018-04-21T08:30:00+00:00</pubDate>
	  <guid>//Einstieg-Kubernetes</guid>
	  <description><![CDATA[
	     <h2 id="wichtigsten-begrifflichkeiten">Wichtigsten Begrifflichkeiten</h2>

<table>
  <thead>
    <tr>
      <th>Begriff</th>
      <th>Erklärung</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Label</td>
      <td>Benutzt um Ressourcen zu klassifizieren.  Zum filtern, organisieren und für massen Operationen.</td>
    </tr>
    <tr>
      <td>Selector</td>
      <td>Zum selektieren anhand von Labels. Kannst du z.B. in den YAML-Files verwenden.</td>
    </tr>
    <tr>
      <td>Replication Controller</td>
      <td>Managed die Lebenszyklen von pods. Stellt z.B. sicher das immer genug Instanzen laufen.</td>
    </tr>
    <tr>
      <td>Service</td>
      <td>Sitzt quasi über den Pods und gibt denen eine IP Adresse und DNS-Name. Ist eine Load Balancing Konfiguration.</td>
    </tr>
    <tr>
      <td>Pod</td>
      <td>Eine Gruppe von Containern and deren Storage</td>
    </tr>
    <tr>
      <td>Cluster</td>
      <td>Set von Maschinen (physikal oder virtuell) auf denen die Anwendungen gemanaged werden und laufen.</td>
    </tr>
    <tr>
      <td>Deployment</td>
      <td>Gibt Kubernetes an wie Instanzen der Anwendung erstellt und geupdatet werden. <br /> (Hat einen Selbstheilungseffekt, fällt ein Node aus, merkt dieser das automatisch und gleicht aus.)</td>
    </tr>
  </tbody>
</table>

<h2 id="wichtigsten-befehle">Wichtigsten Befehle</h2>

<table>
  <thead>
    <tr>
      <th>Begriff</th>
      <th>Erklärung</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>kubectl get services</td>
      <td>Alle services im Namespace</td>
    </tr>
    <tr>
      <td>kubectl get pods -o wide</td>
      <td>Alle pods im Namespace mit mehr details</td>
    </tr>
    <tr>
      <td>kubectl get deployment loginservice</td>
      <td>Listet das Deployment mit dem Namen loginservice auf.</td>
    </tr>
    <tr>
      <td>kubectl describe services loginservice</td>
      <td>Detailierte Informationen über den Service loginservice</td>
    </tr>
    <tr>
      <td>kubectl expose deployment loginservice –type=LoadBalancer –name=loginservice</td>
      <td>Gibt den kompletten Pod über einen externen Endpunkt frei.</td>
    </tr>
  </tbody>
</table>

<h1 id="beispiel-vorgang">Beispiel Vorgang</h1>
<p>Automated build für github -&gt; docker einrichten <a href="https:pierrewilken.de/2018/04/21/Build-Pipeline-Docker-und-Github.html" rel="build pipeline github docker">Build Pipeline: github -&gt; docker</a></p>

<h3 id="in-der-kubernetes-ui-ein-secret-für-den-dockerhub-login-hinterlegen">In der Kubernetes-UI ein Secret für den Dockerhub-Login hinterlegen</h3>
<p>In die Kubernetes CLI gehen</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl create secret docker-registry &lt;SecretName&gt; <span class="nt">--docker-server</span><span class="o">=</span>&lt;your-registry-server&gt; 
<span class="nt">--docker-username</span><span class="o">=</span>&lt;your-name&gt; <span class="nt">--docker-password</span><span class="o">=</span>&lt;your-pword&gt; <span class="nt">--docker-email</span><span class="o">=</span>&lt;your-email&gt;
</code></pre></div></div>
<p>Der Secret-Name muss nachher im YAML-File verwendet werden, damit dieser das Image aus dem private Repo beziehen kann.</p>
<h3 id="yaml-file-erstellen">YAML-File erstellen</h3>
<p>Einfach mit einem beliebigen Editor eine Datei .yaml erstellen.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: loginservice-deployment
  labels: 
    app: loginservice
spec:
  replicas: 3
  selector:
    matchLabels:
      app: loginservice
  template:
    metadata:
      labels:
        app: loginservice
    spec:
      containers:
      - name: loginservice
        image: pierreros/loginservice:latest
        ports:
        - containerPort: 80
          name: http
      imagePullSecrets:
        - name: dockerhub
</code></pre></div></div>
<h3 id="yaml-file-zum-deployment-erzeugen-verwenden">YAML-File zum Deployment erzeugen verwenden</h3>
<p>In Kubernetes rein, oben rechts auf Create klicken.
Dann “Upload a YAML or JSON file” wählen und uploaden. Sollte irgendwas am YAML-File nicht stimmen, meldet er sich.</p>

<p>Nun werden automatisch die Instanzen anhand des Images + der YAML-Einstellungen erstellt. Es wird immer automatisch dafür gesorgt das die Anzahl der Replicas korrekt ist, fällt also z.B. ein Node aus, erstellt er eine neue Instanz auf einem anderen Node.</p>

<p>Unsere Instanzen sind nun als pods auf unterschiedlichen Hosts intern ansprechbar. Von extern sind diese jedoch nicht zugänglich.</p>

<h3 id="den-erstellten-loginservice-nun-auch-von-extern-zugänglich-machen">Den erstellten loginservice nun auch von extern zugänglich machen</h3>
<p>Hierfür müssen wir einen service erstellen, dieser bildet in unserem Fall einen öffentlichen Endpunkt für alle loginservice Instanzen ab.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl expose deployment loginservice <span class="nt">--type</span><span class="o">=</span>LoadBalancer <span class="nt">--name</span><span class="o">=</span>loginservice 
</code></pre></div></div>

<p>Die Anfragen werden automatisch an die einzelnen Instanzen verteilt.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Aufsetzen einer Build Pipeline - Github zum Docker Hub</title>
	  <link>//Build-Pipeline-Docker-Github-de</link>
	  <author></author>
	  <pubDate>2018-04-21T08:00:00+00:00</pubDate>
	  <guid>//Build-Pipeline-Docker-Github-de</guid>
	  <description><![CDATA[
	     <p>Folgende Dinge werden für das Aufsetzen einer simplen Continues Integration und Delivery mit Github und dem Docker Hub benötigt:</p>
<ul>
  <li>Docker Hub Account</li>
  <li>Github Account</li>
  <li>Lauffähiges Projekt in Github mit Dockerfile</li>
</ul>

<h1 id="das-github-projekt-mit-dockerfile">Das Github Projekt mit Dockerfile</h1>
<h2 id="beispielprojekt-mit-dockerfile-net-core">Beispielprojekt mit Dockerfile (.Net Core)</h2>
<p>Das Dockerfile kann selbst geschrieben oder von Visual Studio erstellt werden. 
Auf das selbst schreiben werde ich demnächst detailiert in einem weiteren Beitrag eingehen.</p>

<p>Ihr könnt entweder z.B. dieses Projekt 
<a href="https://github.com/pwilken/dotnetcore-webservice-demonstration" rel="pwilken/dotnetcore-webservice-demonstration">pwilken/dotnetcore-webservice-demonstration</a>
nehmen oder ein selbst erstelltes als Github Repository verwenden.</p>

<h3 id="selbst-erstellen">Selbst erstellen</h3>
<p>In Visual Studio ein neues Projekt erstellen. 
Unter .Net Core den Typ “ASP.NET Core Web Application” auswählen und mit OK bestätigen.
In dem darauffolgenden Fenster “API” wählen und “Enable Docker Support” anhaken + “OS: Linux” auswählen.</p>

<p>Das Projekt könnt ihr, wenn ihr Docker lokal installiert habt und auf Linux Container gestellt habt, so schon lokal mit Docker testen.
Ihr könnt das Projekt aber auch so schon für die Build Pipeline als Repository zu Github hinzufügen. 
Für das Einrichten und Testen reicht das.</p>

<h1 id="einrichten-der-build-pipeline">Einrichten der Build Pipeline</h1>
<h2 id="vorzunehmende-einstellungen">Vorzunehmende Einstellungen</h2>
<p><a href="https://hub.docker.com/" rel="hub.docker">hub.docker</a> -&gt; Settings -&gt; Linked Accounts &amp; Services -&gt; Link Github -&gt; Public and Private -&gt; Authorize docker <br />
<a href="https://cloud.docker.com" rel="cloud.docker">cloud.docker</a> -&gt; Open a repository -&gt; Builds -&gt; Configure Automated Builds</p>

<p>Bei jeder Änderung (push) des Github-Repos, wird das Image nun neu gebuilded.</p>

<h2 id="docker-rechte-in-github">Docker Rechte in Github</h2>
<p>Die Rechte für das Docker Hub sind auf Github sichtbar und entfernbar unter:
Settings -&gt; Applications -&gt; Authorized OAuth Apps</p>

	  ]]></description>
	</item>


</channel>
</rss>
